@page "/register"

@using System.Text.RegularExpressions
@using Pollifyr.App.Services
@using MoonCoreUI.Components.Forms
@using MoonCoreUI.Services
@using Pollifyr.App.Exceptions
@using Pollifyr.App.Models.Forms.Auth
@using Pollifyr.App.Services.Auth
@using Pollifyr.App.UI.Components.Utils
@using Pollifyr.App.UI.Views.Errors

@inject AuthService AuthService
@inject CookieService CookieService
@inject IdentityService IdentityService
@inject NavigationManager NavigationManager
@inject ConfigService ConfigService

<Name>Login</Name>

@if (ConfigService.Get().Properties.AllowRegister)
{
    <div class="p-2 px-md-12">
        <div class="d-flex justify-content-center align-items-center flex-column">
            <img src="/img/logo.svg" alt="Logo" class="h-30px">
            <span class="fs-1 d-block fw-bold">Login</span>
        </div>

        <div class="form-floating mb-4">
            <input type="email" id="email" class="form-control" placeholder="mail@example.com" @bind="Form.Email"/>
            <label for="email">Email Address</label>
        </div>

        <div class="form-floating mb-4">
            <input type="email" id="username" class="form-control" placeholder="maxmustermann123" @bind="Form.Username"/>
            <label for="username">Username</label>
        </div>

        <div class="form-floating mb-4">
            <input type="@(ShowPassword ? "text" : "password")" class="form-control" placeholder="Password" id="password" @bind="Form.Password">
            <label for="password">Password</label>
            <span><a class="text-secondary cursor-pointer" @onclick="() => { ShowPassword = !ShowPassword; StateHasChanged(); }">@(ShowPassword ? "Hide" : "Show") Password</a></span>
        </div>

        <div class="d-flex justify-content-center">
            <WButton Text="Register" CssClasses="btn-primary btn-block mb-4 w-100 w-md-50" WorkingText="Registering" OnClick="Callback"/>
        </div>

        <div class="text-center">
            <p>Already Logged in? <a href="/login">Log in</a></p>
        </div>
    </div>
}
else
{
    <NotFound/>
}

@code {
    private RegisterForm Form = new();
    
    private bool ShowPassword;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var usersExist = await AuthService.UsersExist();
        
        if (usersExist)
        {
            if (IdentityService.LoggedIn || ConfigService.Get().Properties.AllowRegister == false)
            {
                NavigationManager.NavigateTo("/", true);
            }
        }
    }
    
    private async Task Callback()
    {
        if (string.IsNullOrEmpty(Form.Username.Trim()) || Form.Username.Trim().Length < 6)
            throw new DisplayException("The username has to be at least 6 characters long");

        if (string.IsNullOrEmpty(Form.Email.Trim()) || Regex.IsMatch(Form.Email.Trim(), "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"))
            throw new DisplayException("Invalid email address");

        if (string.IsNullOrEmpty(Form.Password) || Form.Password.Length < 8)
            throw new DisplayException("Your password has to be at least 8 characters long");
        
        Form.Email = Form.Email.ToLower().Trim();

        var token = await AuthService.Register(Form.Email, Form.Password, Form.Username);

        if (token != string.Empty)
        {
            await CookieService.SetValue("token", token, ConfigService.Get().Security.TokenDuration);
            NavigationManager.NavigateTo("/", true);
        }
    }
    
}