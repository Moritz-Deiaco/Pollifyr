@page "/login"
@using Pollifyr.App.Models.Forms.Auth
@using MoonCoreUI.Components.Forms
@using MoonCoreUI.Services
@using Pollifyr.App.Services
@using Pollifyr.App.Services.Auth
@using Pollifyr.App.UI.Components.Utils

@inject AuthService AuthService
@inject CookieService CookieService
@inject IdentityService IdentityService
@inject NavigationManager NavigationManager
@inject ConfigService ConfigService

<Name>Login</Name>

<div class="p-2 px-md-12">
  <SmartForm Model="Form" OnValidSubmit="Callback" CssClass="">
    <div class="d-flex justify-content-center align-items-center flex-column">
      <img src="/img/logo.svg" alt="Logo" class="h-30px">
      <span class="fs-1 d-block fw-bold">Login</span>
    </div>
    
    <div class="form-outline mb-4">
      <label class="form-label fs-3" for="email">Email Address</label>
      <input type="email" id="email" class="form-control" placeholder="mail@example.com" @bind="Form.Email"/>
    </div>
    
    <div class="form-outline mb-4">
      <label class="form-label fs-3" for="password">Password</label>
      <input type="@(ShowPassword ? "text" : "password")" class="form-control" placeholder="Password" id="password" @bind="Form.Password">
      <label class="form-label" for="password"> <a class="text-secondary cursor-pointer" @onclick="() => { ShowPassword = !ShowPassword; StateHasChanged(); }">@(ShowPassword ? "Hide" : "Show") Password</a></label>
    </div>

    <div class="d-flex justify-content-center">
      <button type="submit" class="btn btn-primary btn-block mb-4 w-100 w-md-50">Log In</button>
    </div>
  </SmartForm>

  @if (ConfigService.Get().Properties.AllowRegister) {
    <div class="text-center">
      <p>Not signed up yet? <a href="/register">Register</a></p>
    </div>
  }
  
</div>

@code {

  private LoginForm Form = new();

  private bool ShowPassword;

  protected override void OnAfterRender(bool firstRender)
  {
    if (IdentityService.LoggedIn)
    { 
      NavigationManager.NavigateTo("/", true);
    }
  }

  private async Task Callback()
  {
    Form.Email = Form.Email.ToLower().Trim();

    var token = await AuthService.Login(Form.Email, Form.Password);

    if (token != string.Empty)
    {
      await CookieService.SetValue("token", token, 10);
      NavigationManager.NavigateTo("/", true);
    }
  }
}