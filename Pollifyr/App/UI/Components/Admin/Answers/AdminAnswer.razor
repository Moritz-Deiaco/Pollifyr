@using Pollifyr.App.Database.Models
@using Pollifyr.App.Services.Surveys
@using MoonCoreUI.Services
@using System.ComponentModel.DataAnnotations
@using MoonCore.Exceptions
@using Pollifyr.App.UI.Components.Admin.Questions

@inject AnswerService AnswerService
@inject AlertService AlertService

<div class="row px-2">
    <span class="col fs-5 d-flex align-items-center">
        <span class="text-muted me-2 d-flex align-items-center">
            <i class="bx bx-xs bx-minus"></i>
        </span>
        <span>
            @Answer.Text
        </span>
    </span>
    
    <span class="col-auto btn-group fs-7">
        <div class="dropdown">
            <span class="text-muted" role="button" data-bs-toggle="dropdown">
                <i class="bx bx-sm bx-dots-vertical-rounded"></i>
            </span>
            <ul class="dropdown-menu">
                <li class="cursor-pointer">
                    <a class="dropdown-item text-muted d-flex align-items-center" @onclick:preventDefault @onclick="Edit">
                        <i class="bx bx-sm bx-edit me-2"></i><span>Edit</span>
                    </a>
                </li>
                
                <li><hr class="dropdown-divider"></li>
                
                <li class="cursor-pointer">
                    <a class="dropdown-item text-muted d-flex align-items-center" @onclick:preventDefault @onclick="Delete">
                        <i class="bx bx-sm bxs-trash me-2"></i><span>Delete</span>
                    </a>
                </li>
            </ul>
        </div>
        
    </span>
</div>

@code {
    
    [Parameter]
    public Answer Answer { get; set; }
    
    [CascadingParameter]
    public AdminQuestion? ParentQuestion { get; set; }

    private async Task Delete()
    {
        
        var confirm = await AlertService.YesNo("Do you really want to delete this answer? This cannot be undone.");

        if (!confirm)
        {
            return;
        }

        await AnswerService.Delete(Answer);

        await ParentQuestion!.Reload();

    }

    private async Task Edit()
    {
        var text = await AlertService.Text("Input the new text for your answer.", "", Answer!.Text);

        if (string.IsNullOrEmpty(text))
            return;
        
        
        Answer.Text = text;

        await AnswerService.Update(Answer);
        
        StateHasChanged();
    }
}