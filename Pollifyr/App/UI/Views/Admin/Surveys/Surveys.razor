@page "/admin/surveys"
@using Pollifyr.App.Exceptions
@using MoonCoreUI.Components.Forms
@using MoonCoreUI.Services
@using Pollifyr.App.Database.Models
@using Pollifyr.App.Models.Forms.Surveys
@using Pollifyr.App.Services.Surveys
@using Pollifyr.App.UI.Components.Utils


@inject SurveyService SurveyService
@inject AlertService AlertService

<NeedsAdmin/>

<Name>Admin Surveys</Name>

<AutoCrud TItem="Survey"
          TCreateForm="CreateSurveyForm"
          TUpdateForm="UpdateSurveyForm"
          Title="Surveys"
          Load="Load"
          CustomAdd="Add">
    <View>
        <CrudColumn TItem="Survey" Field="@(x => x.Id)" Title="Id" Filterable="true"/>
        <CrudColumn TItem="Survey" Field="@(x => x.Name)" Title="Name" Filterable="true"/>
        <CrudColumn TItem="Survey" Title="Results Visible" Filterable="true">
            <Template>
                @if (context.Visible)
                {
                    <i class="bx bx-sm bx-check text-success"></i>
                }
                else
                {
                    <i class="bx bx-sm bx-x text-danger"></i>
                }
            </Template>
        </CrudColumn>
        <CrudColumn TItem="Survey" Title="Attendable" Filterable="true">
            <Template>
                @if (context.Attendable)
                {
                    <i class="bx bx-sm bx-check text-success"></i>
                }
                else
                {
                    <i class="bx bx-sm bx-x text-danger"></i>
                }
            </Template>
        </CrudColumn>
        <CrudColumn TItem="Survey" Field="@(x => x.CreatedAt)" Title="Created at" />
    </View>
    <Actions>
        <a class="btn btn-icon btn-secondary" href="/admin/survey/@context.Id" title="Edit">
            <i class="bx bx-sm bx-edit"></i>
        </a>
    </Actions>
</AutoCrud>

@code
{
    private Survey[] Load(MoonCore.Abstractions.Repository<Survey> repository)
    {
        return repository.Get().ToArray();
    }

    private async Task Add(Survey survey)
    {
        try
        {
            await SurveyService.New(survey);
        }
        catch (Exception e)
        {
            throw new DisplayException("An unknown error occured while creating a new survey.");
        }
        
    }

    private async Task ChangeVisibility(Survey survey)
    {
        string newVisibilityStatus = !survey.Visible ? "visible" : "invisible";
        
        bool confirm = await AlertService.YesNo($"Change the visibility of '{survey.Name}' to {newVisibilityStatus}?");

        if (!confirm)
            return;
        
        await SurveyService.Visibility(survey, !survey.Visible);
        
        await InvokeAsync(StateHasChanged);
    }
}