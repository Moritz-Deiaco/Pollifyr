@using Pollifyr.App.UI.Components.Utils
@using Pollifyr.App.Services
@using MoonCoreUI.Components
@using MoonCoreUI.Services
@using Pollifyr.App.Database.Models
@using Pollifyr.App.Services.Auth
@using Pollifyr.App.Services.Surveys

@inject ConfigService ConfigService
@inject IdentityService IdentityService
@inject SurveyService SurveyService
@inject IHttpContextAccessor HttpContextAccessor
@inject CookieService CookieService

@page "/"

<Name>Home</Name>


<LazyLoader Load="Load">
    <div class="card card-body bg-info mb-5 border-none">
        <h2 class="m-0">
            <span>
                <i class="bx bxs-bar-chart-alt-2"></i> @ConfigService.Get().Information.AppName - Welcome
            </span>
            <span>
                @if (IdentityService.LoggedIn)
                {
                    @IdentityService.User.Username
                }
            </span>
            <span>!</span>
        </h2>
    </div>
    
    <div class="row">
        <div class="col-md mb-4">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title mb-2">
                        <i class='bx bxs-bar-chart-alt-2 bx-sm'></i> Your opinion is important!
                    </h3>
                    <h5 class="card-subtitle text-muted mb-2">Here are some surveys where you can attend.</h5>
                    <hr class="mb-4"/>
                    
                    @if (AttendableSurveys!.Any())
                    {
                        foreach (var survey in AttendableSurveys!.Take(SurveysCount).ToList())
                        {
                            <div class="row d-flex align-items-center mb-1">
                                <span class="col fs-5">
                                    @survey.Name
                                </span>
                                <span class="col-auto">
                                    
                                    @if (AttendedSurveysCookie.Split("/").Any(x => x == survey.Id.ToString()) || AttendedSurveysUser.Split("/").Any(x => x == survey.Id.ToString()))
                                    {
                                        <a class="btn btn-secondary btn-sm disabled">
                                            <i class='bx bx-bar-chart'></i> Already Attended
                                        </a>
                                    }
                                    else
                                    {
                                        <a class="btn btn-primary btn-sm" href="/survey/@survey.Id">
                                            <i class='bx bx-bar-chart'></i> Attend
                                        </a>
                                    }
                                </span>
                            </div>
                        }
                        if (AttendableSurveys!.Count >= SurveysCount)
                        {
                            <div class="d-flex justify-content-center">
                                <a href="/surveys">View All</a>
                            </div>
                        }
                    }
                    else
                    {
                        <h5 class="text-muted fw-normal mt-2 text-center">
                            Currently, there are no surveys to participate.
                        </h5>
                    }
                    
                </div>
            </div>
        </div>
        <div class="col-md mb-4">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title mb-2">
                        <i class='bx bxs-pie-chart-alt-2 bx-sm'></i> Results for surveys
                    </h3>
                    <h5 class="card-subtitle text-muted mb-2">
                        Surveys where you can see the results are listed here.
                    </h5>
                    <hr class="mb-4"/>

                    @if (VisibleSurveys!.Any())
                    {
                        foreach (var survey in VisibleSurveys!.Take(SurveysCount).ToList())
                        {
                            <div class="row d-flex align-items-center mb-1">
                                <span class="col fs-5">
                                    @survey.Name
                                </span>
                                <span class="col-auto">
                                    <a class="btn btn-info btn-sm" href="/results/@survey.Id">
                                        <i class='bx bx-pie-chart-alt-2'></i> View Results
                                    </a>
                                </span>
                            </div>
                        }

                        if (VisibleSurveys!.Count >= SurveysCount)
                        {
                            <div class="d-flex justify-content-center">
                                <a href="/results">View All</a>
                            </div>
                        }
                    }
                    else
                    {
                        <h5 class="text-muted fw-normal mt-2 text-center">
                            Currently, there are no surveys where you can view the results.
                        </h5>
                    }
                    
                </div>
            </div>
        </div>
    </div>
</LazyLoader>

@code {

    private List<Survey>? Surveys;
    
    private List<Survey>? AttendableSurveys;
    
    private List<Survey>? VisibleSurveys;

    private string AttendedSurveysCookie = "";
    private string AttendedSurveysUser = "";
    
    private int SurveysCount;
    
    private async Task Load(LazyLoader arg)
    {
        SurveysCount = ConfigService.Get().Information.VisibleSurveysOnHomePage;
        
        Surveys = new List<Survey>();
        
        AttendableSurveys = new List<Survey>();
        VisibleSurveys = new List<Survey>();

        Surveys = await SurveyService.GetAll();

        AttendableSurveys = Surveys.Where(x => x.Attendable).ToList();
        VisibleSurveys = Surveys.Where(x => x.Visible).ToList();

        await LoadCompletedSurveys();
    }
    
    private async Task LoadCompletedSurveys()
    {
        if (HttpContextAccessor.HttpContext != null)
        {
            var request = HttpContextAccessor.HttpContext.Request;

            if (request.Cookies.ContainsKey("attendedSurveys"))
            {
                AttendedSurveysCookie = request.Cookies["attendedSurveys"]!;
            }
        }
        else
        {
            AttendedSurveysCookie = await CookieService.GetValue("attendedSurveys", "none");
        }

        if (IdentityService.LoggedIn)
        {
            AttendedSurveysUser = IdentityService.User.CompletedSurveys;
        }
    }
    
}


